{"ast":null,"code":"import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n\n\nclass MatTreeNode extends _MatTreeNodeBase {\n  constructor(elementRef, tree, tabIndex) {\n    super(elementRef, tree);\n    this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    elementRef.nativeElement.classList.add('mat-tree-node');\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\n\nMatTreeNodeDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\n\nMatTreeNodeDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n\n\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  constructor(elementRef, tree, differs, tabIndex) {\n    super(elementRef, tree, differs);\n    this._disabled = false;\n    this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    elementRef.nativeElement.classList.add('mat-nested-tree-node');\n  }\n  /** Whether the node is disabled. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Tabindex for the node. */\n\n\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  } // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n\n\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n\n}\n\nMatTreeNodePadding.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\n\nMatTreeNodePadding.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n\n}\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nMatTreeNodeOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nclass MatTree extends CdkTree {}\n\nMatTree.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\n\nMatTree.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"],\n  exportAs: [\"matTree\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        // The 'cdk-tree' class needs to be included here because classes set in the host in the\n        // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n        // to be set in the host because:\n        // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n        // class from it.\n        // the ElementRef is not available in the constructor so the class can't be applied directly\n        // without a breaking constructor change.\n        'class': 'mat-tree cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\n\n\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  get recursive() {\n    return this._recursive;\n  }\n\n  set recursive(value) {\n    // TODO: when we remove support for ViewEngine, change this setter to an input\n    // alias in the decorator metadata.\n    this._recursive = coerceBooleanProperty(value);\n  }\n\n}\n\nMatTreeNodeToggle.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\n\nMatTreeNodeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nclass MatTreeModule {}\n\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\n\nMatTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CdkTreeModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\n\n\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n\n    return resultNodes;\n  }\n\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n\n\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n\n\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n\n      if (expand) {\n        results.push(node);\n      }\n\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\n\n\nclass MatTreeFlatDataSource extends DataSource {\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\n\n\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n  }\n\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["i1","CdkTreeNode","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTree","CdkTreeNodeToggle","CdkTreeModule","i0","Directive","Attribute","Input","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","_MatTreeNodeBase","MatTreeNode","constructor","elementRef","tree","tabIndex","Number","nativeElement","classList","add","ngOnInit","ngDoCheck","ngOnDestroy","ɵfac","ElementRef","ɵdir","provide","useExisting","type","args","selector","exportAs","inputs","providers","undefined","decorators","MatTreeNodeDef","data","MatNestedTreeNode","differs","_disabled","disabled","value","_tabIndex","ngAfterContentInit","IterableDiffers","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","MatTreeNodeOutlet","viewContainer","_node","ViewContainerRef","MatTree","ɵcmp","template","host","encapsulation","None","changeDetection","Default","styles","_nodeOutlet","static","MatTreeNodeToggle","recursive","_recursive","MAT_TREE_DIRECTIVES","MatTreeModule","ɵmod","ɵinj","imports","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource","arguments"],"sources":["C:/Users/alumnat/Documents/GitHub/Mijuru/Mijuru/Mijuru-Angular/node_modules/@angular/material/fesm2020/tree.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-tree-node');\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatTreeNode, selector: \"mat-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; } });\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatTreeNodeDef, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: ['when: matTreeNodeDefWhen'],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\n                }]\n        }], propDecorators: { data: [{\n                type: Input,\n                args: ['matTreeNode']\n            }] } });\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-nested-tree-node');\n    }\n    /** Whether the node is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Tabindex for the node. */\n    get tabIndex() {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatNestedTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatNestedTreeNode, selector: \"mat-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, providers: [\n        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n    ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { node: [{\n                type: Input,\n                args: ['matNestedTreeNode']\n            }], disabled: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n}\nMatTreeNodePadding.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodePadding.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatTreeNodePadding, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: ['matTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['matTreeNodePaddingIndent']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\", providers: [\n        {\n            provide: CdkTreeNodeOutlet,\n            useExisting: MatTreeNodeOutlet,\n        },\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatTree.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatTree, selector: \"mat-tree\", host: { attributes: { \"role\": \"tree\" }, classAttribute: \"mat-tree cdk-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], directives: [{ type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTree, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                        // The 'cdk-tree' class needs to be included here because classes set in the host in the\n                        // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n                        // to be set in the host because:\n                        // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n                        // class from it.\n                        // the ElementRef is not available in the constructor so the class can't be applied directly\n                        // without a breaking constructor change.\n                        'class': 'mat-tree cdk-tree',\n                        'role': 'tree',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"] }]\n        }], propDecorators: { _nodeOutlet: [{\n                type: ViewChild,\n                args: [MatTreeNodeOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    get recursive() {\n        return this._recursive;\n    }\n    set recursive(value) {\n        // TODO: when we remove support for ViewEngine, change this setter to an input\n        // alias in the decorator metadata.\n        this._recursive = coerceBooleanProperty(value);\n    }\n}\nMatTreeNodeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatTreeNodeToggle, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\n                }]\n        }], propDecorators: { recursive: [{\n                type: Input,\n                args: ['matTreeNodeToggleRecursive']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet,\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeModule, declarations: [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet], imports: [CdkTreeModule, MatCommonModule], exports: [MatCommonModule, MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet] });\nMatTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeModule, imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTreeModule, MatCommonModule],\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                    declarations: MAT_TREE_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n    }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}