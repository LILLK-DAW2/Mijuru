{"ast":null,"code":"import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, ContentChildren, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n\nclass BaseTreeControl {\n  constructor() {\n    /** A selection model with multi-selection to track expansion status. */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /** Toggles one single data node's expanded/collapsed state. */\n\n\n  toggle(dataNode) {\n    this.expansionModel.toggle(this._trackByValue(dataNode));\n  }\n  /** Expands one single data node. */\n\n\n  expand(dataNode) {\n    this.expansionModel.select(this._trackByValue(dataNode));\n  }\n  /** Collapses one single data node. */\n\n\n  collapse(dataNode) {\n    this.expansionModel.deselect(this._trackByValue(dataNode));\n  }\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n\n\n  isExpanded(dataNode) {\n    return this.expansionModel.isSelected(this._trackByValue(dataNode));\n  }\n  /** Toggles a subtree rooted at `node` recursively. */\n\n\n  toggleDescendants(dataNode) {\n    this.expansionModel.isSelected(this._trackByValue(dataNode)) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n  }\n  /** Collapse all dataNodes in the tree. */\n\n\n  collapseAll() {\n    this.expansionModel.clear();\n  }\n  /** Expands a subtree rooted at given data node recursively. */\n\n\n  expandDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n  /** Collapses a subtree rooted at given data node recursively. */\n\n\n  collapseDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n\n  _trackByValue(value) {\n    return this.trackBy ? this.trackBy(value) : value;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\n\n\nclass FlatTreeControl extends BaseTreeControl {\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(getLevel, isExpandable, options) {\n    super();\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.options = options;\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n\n\n  getDescendants(dataNode) {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n\n    for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n      results.push(this.dataNodes[i]);\n    }\n\n    return results;\n  }\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n\n\n  expandAll() {\n    this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\n\n\nclass NestedTreeControl extends BaseTreeControl {\n  /** Construct with nested tree function getChildren. */\n  constructor(getChildren, options) {\n    super();\n    this.getChildren = getChildren;\n    this.options = options;\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n\n\n  expandAll() {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n  }\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n\n\n  getDescendants(dataNode) {\n    const descendants = [];\n\n    this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n    return descendants.splice(1);\n  }\n  /** A helper function to get descendants recursively. */\n\n\n  _getDescendants(descendants, dataNode) {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach(child => this._getDescendants(descendants, child));\n    } else if (isObservable(childrenNodes)) {\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n      childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n        for (const child of children) {\n          this._getDescendants(descendants, child);\n        }\n      });\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\n\n\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nclass CdkTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n\n}\n\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n  return new (t || CdkTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nCdkTreeNodeOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNodeOutlet,\n  selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Context provided to the tree node component. */\n\n\nclass CdkTreeNodeOutletContext {\n  constructor(data) {\n    this.$implicit = data;\n  }\n\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nclass CdkTreeNodeDef {\n  /** @docs-private */\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n  return new (t || CdkTreeNodeDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkTreeNodeDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNodeDef,\n  selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"cdkTreeNodeDefWhen\", \"when\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeDef]',\n      inputs: ['when: cdkTreeNodeDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n\n\nclass CdkTree {\n  constructor(_differs, _changeDetectorRef) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    /** Level of nodes */\n\n    this._levels = new Map(); // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n  }\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n\n\n  get dataSource() {\n    return this._dataSource;\n  }\n\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n    if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlMissingError();\n    }\n  }\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this.viewChange.complete();\n\n    this._onDestroy.next();\n\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n      this.dataSource.disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n\n      this._dataSubscription = null;\n    }\n  }\n\n  ngAfterContentChecked() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n\n    if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n\n    this._defaultNodeDef = defaultNodeDefs[0];\n\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  } // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n  //     and nested trees.\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n\n\n  _switchDataSource(dataSource) {\n    if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n      this.dataSource.disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n\n      this._dataSubscription = null;\n    } // Remove the all dataNodes if there is now no data source\n\n\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n  /** Set up a subscription for the data provided by the data source. */\n\n\n  _observeRenderChanges() {\n    let dataStream;\n\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (isObservable(this._dataSource)) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = of(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => this.renderNodeChanges(data));\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n\n\n  renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n    const changes = dataDiffer.diff(data);\n\n    if (!changes) {\n      return;\n    }\n\n    changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n      if (item.previousIndex == null) {\n        this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n      } else if (currentIndex == null) {\n        viewContainer.remove(adjustedPreviousIndex);\n\n        this._levels.delete(item.item);\n      } else {\n        const view = viewContainer.get(adjustedPreviousIndex);\n        viewContainer.move(view, currentIndex);\n      }\n    });\n\n    this._changeDetectorRef.detectChanges();\n  }\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n\n\n  _getNodeDef(data, i) {\n    if (this._nodeDefs.length === 1) {\n      return this._nodeDefs.first;\n    }\n\n    const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n    if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMissingMatchingNodeDefError();\n    }\n\n    return nodeDef;\n  }\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n\n\n  insertNode(nodeData, index, viewContainer, parentData) {\n    const node = this._getNodeDef(nodeData, index); // Node context that will be provided to created embedded view\n\n\n    const context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = this._levels.get(parentData) + 1;\n    } else {\n      context.level = 0;\n    }\n\n    this._levels.set(nodeData, context.level); // Use default tree nodeOutlet, or nested node's nodeOutlet\n\n\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n\n}\n\nCdkTree.ɵfac = function CdkTree_Factory(t) {\n  return new (t || CdkTree)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nCdkTree.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkTree,\n  selectors: [[\"cdk-tree\"]],\n  contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    }\n  },\n  viewQuery: function CdkTree_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n  inputs: {\n    dataSource: \"dataSource\",\n    treeControl: \"treeControl\",\n    trackBy: \"trackBy\"\n  },\n  exportAs: [\"cdkTree\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n  template: function CdkTree_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkTreeNodeOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTree, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-tree',\n      exportAs: 'cdkTree',\n      template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n      // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n      // declared elsewhere, they are checked when their declaration points are checked.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: i0.IterableDiffers\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    dataSource: [{\n      type: Input\n    }],\n    treeControl: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [CdkTreeNodeOutlet, {\n        static: true\n      }]\n    }],\n    _nodeDefs: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeDef, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n\n\nclass CdkTreeNode {\n  constructor(_elementRef, _tree) {\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._destroyed = new Subject();\n    /** Emits when the node's data has changed. */\n\n    this._dataChanges = new Subject();\n    CdkTreeNode.mostRecentTreeNode = this; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    this._elementRef.nativeElement.classList.add('cdk-tree-node');\n\n    this.role = 'treeitem';\n  }\n  /**\n   * The role of the tree node.\n   * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n   *   removed in a future version.\n   * @breaking-change 12.0.0 Remove this input\n   */\n\n\n  get role() {\n    return 'treeitem';\n  }\n\n  set role(_role) {\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.setAttribute('role', _role);\n  }\n  /** The tree node's data. */\n\n\n  get data() {\n    return this._data;\n  }\n\n  set data(value) {\n    if (value !== this._data) {\n      this._data = value;\n\n      this._setRoleFromData();\n\n      this._dataChanges.next();\n    }\n  }\n\n  get isExpanded() {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n\n  _setExpanded(_expanded) {\n    this._isAriaExpanded = _expanded;\n\n    this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n  }\n\n  get level() {\n    // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n    // aria-level off the parent node and use it as the level for this node (note aria-level is\n    // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n  }\n\n  ngOnInit() {\n    this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n\n    this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n  }\n\n  ngDoCheck() {\n    // aria-expanded is be set here because the expanded state is stored in the tree control and\n    // the node isn't aware when the state is changed.\n    // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n    // TODO: move to host after View Engine deprecation\n    if (this.isExpanded != this._isAriaExpanded) {\n      this._setExpanded(this.isExpanded);\n    }\n  }\n\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n\n    this._dataChanges.complete();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** Focuses the menu item. Implements for FocusableOption. */\n\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  } // TODO: role should eventually just be set in the component host\n\n\n  _setRoleFromData() {\n    if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlFunctionsMissingError();\n    }\n\n    this.role = 'treeitem';\n  }\n\n}\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\n\n\nCdkTreeNode.mostRecentTreeNode = null;\n\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n  return new (t || CdkTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CdkTree));\n};\n\nCdkTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNode,\n  selectors: [[\"cdk-tree-node\"]],\n  inputs: {\n    role: \"role\"\n  },\n  exportAs: [\"cdkTreeNode\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-tree-node',\n      exportAs: 'cdkTreeNode'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: CdkTree\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction getParentNodeAriaLevel(nodeElement) {\n  let parent = nodeElement.parentElement;\n\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return coerceNumberProperty(parent.getAttribute('aria-level'));\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\n\nfunction isNodeElement(element) {\n  const classList = element.classList;\n  return !!(classList?.contains('cdk-nested-tree-node') || classList?.contains('cdk-tree'));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\n\n\nclass CdkNestedTreeNode extends CdkTreeNode {\n  constructor(elementRef, tree, _differs) {\n    super(elementRef, tree);\n    this._differs = _differs; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n  }\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n    if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlFunctionsMissingError();\n    }\n\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(childrenNodes);\n    } else if (isObservable(childrenNodes)) {\n      childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(result => this.updateChildrenNodes(result));\n    }\n\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateChildrenNodes());\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._clear();\n\n    super.ngOnDestroy();\n  }\n  /** Add children dataNodes to the NodeOutlet */\n\n\n  updateChildrenNodes(children) {\n    const outlet = this._getNodeOutlet();\n\n    if (children) {\n      this._children = children;\n    }\n\n    if (outlet && this._children) {\n      const viewContainer = outlet.viewContainer;\n\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n  /** Clear the children dataNodes. */\n\n\n  _clear() {\n    const outlet = this._getNodeOutlet();\n\n    if (outlet) {\n      outlet.viewContainer.clear();\n\n      this._dataDiffer.diff([]);\n    }\n  }\n  /** Gets the outlet for the current node. */\n\n\n  _getNodeOutlet() {\n    const outlets = this.nodeOutlet; // Note that since we use `descendants: true` on the query, we have to ensure\n    // that we don't pick up the outlet of a child node by accident.\n\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n  }\n\n}\n\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n  return new (t || CdkNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n};\n\nCdkNestedTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkNestedTreeNode,\n  selectors: [[\"cdk-nested-tree-node\"]],\n  contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"cdkNestedTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: CdkNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: CdkNestedTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-nested-tree-node',\n      exportAs: 'cdkNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: CdkNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: CdkTree\n    }, {\n      type: i0.IterableDiffers\n    }];\n  }, {\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeOutlet, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Regex used to split a string on its CSS units. */\n\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n\nclass CdkTreeNodePadding {\n  constructor(_treeNode, _tree, _element, _dir) {\n    this._treeNode = _treeNode;\n    this._tree = _tree;\n    this._element = _element;\n    this._dir = _dir;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._destroyed = new Subject();\n    /** CSS units used for the indentation value. */\n\n    this.indentUnits = 'px';\n    this._indent = 40;\n\n    this._setPadding();\n\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n    } // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n\n\n    _treeNode._dataChanges.subscribe(() => this._setPadding());\n  }\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n\n\n  get level() {\n    return this._level;\n  }\n\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n\n\n  _paddingIndent() {\n    const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n    const level = this._level == null ? nodeLevel : this._level;\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n\n  _setPadding(forceChange = false) {\n    const padding = this._paddingIndent();\n\n    if (padding !== this._currentPadding || forceChange) {\n      const element = this._element.nativeElement;\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n      element.style[paddingProp] = padding || '';\n      element.style[resetProp] = '';\n      this._currentPadding = padding;\n    }\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n\n\n  _setLevelInput(value) {\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n    // they set 0 explicitly.\n    this._level = coerceNumberProperty(value, null);\n\n    this._setPadding();\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n\n\n  _setIndentInput(indent) {\n    let value = indent;\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n\n    this._setPadding();\n  }\n\n}\n\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n  return new (t || CdkTreeNodePadding)(i0.ɵɵdirectiveInject(CdkTreeNode), i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\n\nCdkTreeNodePadding.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNodePadding,\n  selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"cdkTreeNodePadding\", \"level\"],\n    indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodePadding]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTreeNode\n    }, {\n      type: CdkTree\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    level: [{\n      type: Input,\n      args: ['cdkTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['cdkTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Node toggle to expand/collapse the node.\n */\n\n\nclass CdkTreeNodeToggle {\n  constructor(_tree, _treeNode) {\n    this._tree = _tree;\n    this._treeNode = _treeNode;\n    this._recursive = false;\n  }\n  /** Whether expand/collapse the node recursively. */\n\n\n  get recursive() {\n    return this._recursive;\n  }\n\n  set recursive(value) {\n    this._recursive = coerceBooleanProperty(value);\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n  _toggle(event) {\n    this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n    event.stopPropagation();\n  }\n\n}\n\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n  return new (t || CdkTreeNodeToggle)(i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(CdkTreeNode));\n};\n\nCdkTreeNodeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNodeToggle,\n  selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n  hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n        return ctx._toggle($event);\n      });\n    }\n  },\n  inputs: {\n    recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeToggle]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTree\n    }, {\n      type: CdkTreeNode\n    }];\n  }, {\n    recursive: [{\n      type: Input,\n      args: ['cdkTreeNodeToggleRecursive']\n    }],\n    _toggle: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n\nclass CdkTreeModule {}\n\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n  return new (t || CdkTreeModule)();\n};\n\nCdkTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdkTreeModule\n});\nCdkTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };","map":{"version":3,"names":["SelectionModel","isDataSource","isObservable","Subject","BehaviorSubject","of","take","filter","takeUntil","i0","InjectionToken","Directive","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","ViewChild","ContentChildren","HostListener","NgModule","coerceNumberProperty","coerceBooleanProperty","i2","BaseTreeControl","constructor","expansionModel","toggle","dataNode","_trackByValue","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","getDescendants","map","value","trackBy","FlatTreeControl","getLevel","isExpandable","options","startIndex","dataNodes","indexOf","results","i","length","expandAll","node","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","Boolean","subscribe","children","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","viewContainer","_node","ɵfac","ViewContainerRef","ɵdir","type","args","selector","undefined","decorators","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","TemplateRef","inputs","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","dataSource","_dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","create","treeControl","ngDevMode","ngOnDestroy","_nodeOutlet","complete","next","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","def","when","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","IterableDiffers","ChangeDetectorRef","ɵcmp","exportAs","host","encapsulation","None","changeDetection","Default","static","_elementRef","_tree","_destroyed","_dataChanges","nativeElement","classList","add","role","_role","setAttribute","_data","_setRoleFromData","_setExpanded","_expanded","_isAriaExpanded","_parentNodeAriaLevel","getParentNodeAriaLevel","ngDoCheck","focus","ElementRef","nodeElement","parent","parentElement","isNodeElement","contains","getAttribute","element","CdkNestedTreeNode","elementRef","tree","ngAfterContentInit","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","provide","useExisting","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_element","_dir","indentUnits","_indent","_setPadding","change","_level","_setLevelInput","indent","_setIndentInput","_paddingIndent","nodeLevel","forceChange","padding","_currentPadding","paddingProp","resetProp","style","units","parts","split","Directionality","CdkTreeNodeToggle","_recursive","recursive","_toggle","event","stopPropagation","EXPORTED_DECLARATIONS","CdkTreeModule","ɵmod","ɵinj","exports","declarations"],"sources":["C:/Users/alumnat/Documents/GitHub/Mijuru/Mijuru/Mijuru-Angular/node_modules/@angular/cdk/fesm2020/tree.mjs"],"sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, ContentChildren, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode))\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkTreeNodeOutlet, selector: \"[cdkTreeNodeOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodeOutlet]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNodeDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkTreeNodeDef, selector: \"[cdkTreeNodeDef]\", inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodeDef]',\n                    inputs: ['when: cdkTreeNodeDefWhen'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTree, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nCdkTree.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkTree, selector: \"cdk-tree\", inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, host: { attributes: { \"role\": \"tree\" }, classAttribute: \"cdk-tree\" }, queries: [{ propertyName: \"_nodeDefs\", predicate: CdkTreeNodeDef, descendants: true }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: CdkTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"cdkTree\"], ngImport: i0, template: `<ng-container cdkTreeNodeOutlet></ng-container>`, isInline: true, directives: [{ type: CdkTreeNodeOutlet, selector: \"[cdkTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTree, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-tree',\n                    exportAs: 'cdkTree',\n                    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                    host: {\n                        'class': 'cdk-tree',\n                        'role': 'tree',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                    // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                    // declared elsewhere, they are checked when their declaration points are checked.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { dataSource: [{\n                type: Input\n            }], treeControl: [{\n                type: Input\n            }], trackBy: [{\n                type: Input\n            }], _nodeOutlet: [{\n                type: ViewChild,\n                args: [CdkTreeNodeOutlet, { static: true }]\n            }], _nodeDefs: [{\n                type: ContentChildren,\n                args: [CdkTreeNodeDef, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-tree-node');\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() {\n        return 'treeitem';\n    }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() {\n        return this._data;\n    }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    _setExpanded(_expanded) {\n        this._isAriaExpanded = _expanded;\n        this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel\n            ? this._tree.treeControl.getLevel(this._data)\n            : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngDoCheck() {\n        // aria-expanded is be set here because the expanded state is stored in the tree control and\n        // the node isn't aware when the state is changed.\n        // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n        // TODO: move to host after View Engine deprecation\n        if (this.isExpanded != this._isAriaExpanded) {\n            this._setExpanded(this.isExpanded);\n        }\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable &&\n            !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNode, deps: [{ token: i0.ElementRef }, { token: CdkTree }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkTreeNode, selector: \"cdk-tree-node\", inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-tree-node',\n                    exportAs: 'cdkTreeNode',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: CdkTree }]; }, propDecorators: { role: [{\n                type: Input\n            }] } });\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!(classList?.contains('cdk-nested-tree-node') || classList?.contains('cdk-tree'));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, _differs) {\n        super(elementRef, tree);\n        this._differs = _differs;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: CdkTree }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nCdkNestedTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkNestedTreeNode, selector: \"cdk-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, providers: [\n        { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode },\n    ], queries: [{ propertyName: \"nodeOutlet\", predicate: CdkTreeNodeOutlet, descendants: true }], exportAs: [\"cdkNestedTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-nested-tree-node',\n                    exportAs: 'cdkNestedTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [\n                        { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: CdkTree }, { type: i0.IterableDiffers }]; }, propDecorators: { nodeOutlet: [{\n                type: ContentChildren,\n                args: [CdkTreeNodeOutlet, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNodePadding, deps: [{ token: CdkTreeNode }, { token: CdkTree }, { token: i0.ElementRef }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodePadding.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkTreeNodePadding, selector: \"[cdkTreeNodePadding]\", inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodePadding]',\n                }]\n        }], ctorParameters: function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: i0.ElementRef }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { level: [{\n                type: Input,\n                args: ['cdkTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['cdkTreeNodePaddingIndent']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() {\n        return this._recursive;\n    }\n    set recursive(value) {\n        this._recursive = coerceBooleanProperty(value);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNodeToggle, deps: [{ token: CdkTree }, { token: CdkTreeNode }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkTreeNodeToggle, selector: \"[cdkTreeNodeToggle]\", inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] }, host: { listeners: { \"click\": \"_toggle($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkTreeNodeToggle]' }]\n        }], ctorParameters: function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, propDecorators: { recursive: [{\n                type: Input,\n                args: ['cdkTreeNodeToggleRecursive']\n            }], _toggle: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeModule, declarations: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet], exports: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet] });\nCdkTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}